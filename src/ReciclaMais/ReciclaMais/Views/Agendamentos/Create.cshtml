@model ReciclaMais.Models.Agendamento

@{
    ViewData["Title"] = "Criar Agendamento";
    var produtos = ViewBag.Produtos as List<ReciclaMais.Models.Produto>;
    var estadosConservacao = Enum.GetValues(typeof(ReciclaMais.Enuns.EstadosConservacao));
}

<h2>Agende a sua coleta!</h2>

<form asp-action="Create" method="post">
    <!-- Linha para Data e Horário -->
    <div class="row">
        <div class="col-md-3">
            <div class="form-group">
                <label asp-for="DataAgendamento"></label>
                <input asp-for="DataAgendamento" type="date" class="form-control" oninput="validarDiasPermitidos(this)" />
                <span asp-validation-for="DataAgendamento" class="text-danger"></span>
            </div>
        </div>

        <div class="col-md-2">
            <div class="form-group">
                <label asp-for="Horario">Horário</label>
                <select asp-for="Horario" class="form-control">
                    @if (ViewBag.HorariosDisponiveis != null)
                    {
                        foreach (var horario in ViewBag.HorariosDisponiveis)
                        {
                            <option value="@horario">@horario</option>
                        }
                    }
                    else
                    {
                        <option value="">Nenhum horário disponível</option>
                    }
                </select>
                <span asp-validation-for="Horario" class="text-danger"></span>
            </div>
        </div>
    </div>
    <hr />
    <h4>Itens de Coleta</h4>
    <div id="itensColetaContainer">
        <!-- Item de Coleta Base -->
        <div class="itemColeta">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="tituloItensColeta">Produto</label>
                        <select name="ItensColeta[0].ProdutoId" class="form-control produtoSelect" onchange="atualizarPontuacao(this)">
                            @foreach (var produto in produtos)
                            {
                                <option value="@produto.Id" data-pontuacao="@produto.PontuacaoUnitaria" title="@produto.Descricao">@produto.Nome</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label class="tituloItensColeta">Quantidade</label>
                        <input type="number" name="ItensColeta[0].Quantidade" class="form-control quantidadeInput" value="1" min="1" onchange="atualizarPontuacao(this)" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="tituloItensColeta">Estado de Conservação</label>
                        <select name="ItensColeta[0].EstadoConservacao" class="form-control estadoSelect" onchange="atualizarPontuacao(this)">
                            @foreach (var estado in ViewBag.EstadosConservacao as List<EstadoConservacaoViewModel>)
                            {
                                <option value="@estado.Nome" data-percentual="@estado.Percentual">@estado.Nome</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        @* <button type="button" class="btn btn-danger removeItemBtn" onclick="removerItem(this)">Remover</button> *@
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <label class="tituloItensColeta">Pontuação</label>
                    <span class="pontuacaoItem">0</span>
                </div>
            </div>
        </div>
    </div>

    <button type="button" id="addItemBtn" class="btn btn-primary">Adicionar Item</button>

    <br />
    <br />
    <h4>Pontuação Total: <span id="pontuacaoTotal">0</span></h4>

    <div>
        <button type="submit" class="btn btn-success">Salvar</button>
    </div>
</form>

@section Scripts {
    <script>
        let itemIndex = 0;

        document.addEventListener("DOMContentLoaded", () => {
            // Atualizar pontuação inicial dos itens de coleta.
            document.querySelectorAll('.itemColeta').forEach(item => {
                atualizarPontuacao(item.querySelector('.produtoSelect'));
            });

            atualizarPontuacaoTotal();
        });

        // Adicionar um novo item de coleta.
        document.getElementById("addItemBtn").addEventListener("click", function () {
            itemIndex++;
            const container = document.getElementById("itensColetaContainer");

            const newItemHtml = `
                    <div class="itemColeta">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <select name="ItensColeta[${itemIndex}].ProdutoId" class="form-control produtoSelect" onchange="atualizarPontuacao(this)">
                                    @foreach (var produto in produtos)
                                    {
                                        <option value="@produto.Id" data-pontuacao="@produto.PontuacaoUnitaria" title="@produto.Descricao">@produto.Nome</option>
                                    }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <input type="number" name="ItensColeta[${itemIndex}].Quantidade" class="form-control quantidadeInput" value="1" min="1" onchange="atualizarPontuacao(this)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <select name="ItensColeta[${itemIndex}].EstadoConservacao" class="form-control estadoSelect" onchange="atualizarPontuacao(this)">
                                    @foreach (var estado in ViewBag.EstadosConservacao as List<EstadoConservacaoViewModel>)
                                    {
                                        <option value="@estado.Nome" data-percentual="@estado.Percentual">@estado.Nome</option>
                                    }
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <button type="button" class="btn btn-danger removeItemBtn" onclick="removerItem(this)">X</button>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <span class="pontuacaoItem">0</span>
                            </div>
                        </div>
                    </div>
                `;
            container.insertAdjacentHTML("beforeend", newItemHtml);

            // Atualizar pontuação do item recém-adicionado.
            const newItem = container.lastElementChild;
            atualizarPontuacao(newItem.querySelector('.produtoSelect'));
        });

        // Atualizar pontuação de cada item.
        function atualizarPontuacao(element) {
            const itemColeta = element.closest('.itemColeta');
            const produtoSelect = itemColeta.querySelector('.produtoSelect');
            const quantidadeInput = itemColeta.querySelector('.quantidadeInput');
            const estadoSelect = itemColeta.querySelector('.estadoSelect');
            const pontuacaoItem = itemColeta.querySelector('.pontuacaoItem');

            const pontuacaoBase = parseInt(produtoSelect.selectedOptions[0].getAttribute('data-pontuacao')) || 0;
            const quantidade = parseInt(quantidadeInput.value) || 0;

            // Pegando o percentual associado ao estado de conservação.
            const percentual = parseFloat(estadoSelect.selectedOptions[0]?.getAttribute('data-percentual')) || 1;

            const pontuacaoTotalItem = Math.round(pontuacaoBase * quantidade * percentual);
            pontuacaoItem.textContent = pontuacaoTotalItem;

            atualizarPontuacaoTotal();
        }

        // Função para atualizar a pontuação total.
        function atualizarPontuacaoTotal() {
            const pontuacaoItems = document.querySelectorAll('.pontuacaoItem');
            let total = 0;
            pontuacaoItems.forEach(item => {
                total += parseInt(item.textContent) || 0;
            });
            document.getElementById("pontuacaoTotal").textContent = total;
        }

        // Remover item de coleta.
        function removerItem(button) {
            const itemColeta = button.closest('.itemColeta');
            itemColeta.remove();
            atualizarPontuacaoTotal();
        }

        // Função para calcular pontuação ao carregar a página.
        function calcularPontuacaoInicial() {
            const produtoSelects = document.querySelectorAll('.produtoSelect');
            produtoSelects.forEach(produtoSelect => {
                atualizarPontuacao(produtoSelect);
            });
        }

        // Validar dias permitidos.
        function validarDiasPermitidos(input) {
            const dataSelecionada = new Date(input.value);
            const diaSemana = dataSelecionada.getDay();

            // Verifica se o dia não é terça-feira (1) nem quinta-feira (3).
            if (diaSemana !== 1 && diaSemana !== 3) {
                input.value = "";

                Swal.fire({
                    title: "Data Inválida!",
                    text: "Você só pode agendar coletas nas terças e quintas-feiras. Por favor, escolha uma data válida.",
                    icon: "warning",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#3085d6"
                });
            }
        }

        // Garantir que a pontuação inicial esteja atualizada ao carregar a página.
        window.onload = calcularPontuacaoInicial;
    </script>

}
